'PNEENTRY1A: pre-note text processing
'
'This script is called by the NTAFTERSCRIPT at the end of entry point 1 for
'progress notes. It is used to pre-load data in the progress note templates. It
'uses text files located in the "PNOTE" directory of the MIS directory. It does
'two different operations. 1) Files named the same as the parmfile used with the
'extension -L#, where # is a number, are used to display a list of items in a
'checkbox. The number (#) corresponds to the number of the texblock where the
'info will be placed. There is also capability to call multi-level lists. 2) Any
'files with the parmfile name and -T# simply loads the data into the
'corresponding textblock.
'
' 04/09/2012: RLE
' ** instead of using -Tx files, you can now use the 'PRETXTx' parm
'    directly in the parmfile.
'
'*******************************************************************************
' TODO:
'  - script cleanup this is a mess
'  - *WHEN appropriate* move options out of external files and directly into
'    the parmfile.
'*******************************************************************************
'
'SCRIPT: pneentry1a
'AUTHOR: BOBBY DORRIS
'DATE:   12/06/2004  Initial program
'*******************************************************************************
'RLE 20100707 misc tab/spacing formatting
'             capatilized script name
'RLE 20120409 .002
'  - added support for custom PRETXTx parms in the parmfile
'    will be used to populate text blocks with default text
'    much the same that the "PARMNAME-T#" feature does
'  - minor cleanup of loops with auto-increment for clarity
'RLE 20120426 .003
'  - support for more than one PRETXTx line per parm
'    this allows you to have long lines for a single textbox
'    without using the unix files.
'RLE 20120507 .004
'  - fixed issue with not supporting prenote lists
'    when text from PRETXTx parm files are present.
'  - add logic to insert selected list options after pre-note text
'    on the next line
'RLE 20120507 .005
'  - fixed pre-note text from unix files not populating
'RLE 20131018 .006
'  + added textblock option to default entire text file and not provide text boxes
'RLE 20150207 .007
'  + added 3rd level option to include text block


%version 01.0.007 02/06/15 GCC
%desc This script is called by the NTAFTERSCRIPT at the end of entry point 1 for
%desc progress notes. It is used to pre-load data in the progress note templates.

start PNEENTRY1A(parmfile, gennote, ntopt[], rtrncode)
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

   parmfile       is alpha
   gennote        is dbtext-l $allowupdate(gennote)   'Textblock 1
   ntopt[]        is dbtext-l $allowupdate(ntopt[])   'Textblock 2-9
   rtrncode       is alpha $allowupdate(rtrncode)
   selectbox[]    is alpha
   tblock         is dbtext-l

   listheader     is text
   getparmstr     is text
   text_in        is dbtext
   rc             is numeric
   continue       is alpha
   string         is alpha
   cnt            is numeric
   dcnt           is numeric
   fcnt           is numeric
   lcnt           is numeric
   tcnt           is numeric
   cnt2           is numeric
   filestr        is alpha
   contstr        is alpha
   filename       is alpha
   dctstr         is alpha
   dctnum         is binary

   t1             is alpha
   p_arr[]        is alpha

   inline[]       is alpha
   'lfile          is alpha
   'pcnt           is binary

   d_code[]       is alpha
   d_block[]      is alpha
   d_desc[]       is alpha
   d_act[]        is alpha
   d_alt1[]       is alpha
   d_text[]       is alpha
   d_value[]      is alpha
   d_file[]       is x
   d_mode[]       is x
   
   l3_desc[]      is x
   l3_file[]      is x
   l3_mode[]      is x
   l3_check[]     is x
   l3_txt[]       is x
   tmp[]          is x

   listcnt[]      is numeric
   content_txt    is dbtext
   objectives[]   is alpha
   ob_text[]      is dbtext

   i              is i
   T              is x
   t_block        is x
   f_gen          is x
   f_opt[]        is x
   p[]            is x
   ptr            is i

gosub _init
gosub _main
return

_main:
   lcnt = 0
   'lcnt 1 will place data in the variable gennote. lcnt 2-9 will use ntopt[].
   do while lcnt++ < 9
      if lcnt = 1 then
         'If there is already data in the textblock, then skip adding additional data.
         'This is for when the "Back" button is selected after the note is written.
         if f_gen = "Y" and gennote dp then
            goto NEXTFILE
         endif
      else
         if f_opt[lcnt] = "Y" and ntopt[lcnt] dp then
            goto NEXTFILE
         endif
      endif

      $clear(selectbox[], d_desc[], d_code[], d_block[], d_value[], d_text[],
            text_in, content_txt)
      tcnt = 1
      cnt  = 1
      fcnt = 0
   'Check to see if a file exists with the L extension, if not then goto SKIPLIST
      filename = filestr + "-L" + $format(lcnt,"Z")   'Get filename of list file
      rc = $openfile(1,filename,"I")               'Openfile for read
      if rc = 2 then                         'If file is open
         rc = $closefile(1,"C")                 'Then close and reopen
         rc = $openfile(1,filename,"I")
      endif
      if rc != 0 then
         goto SKIPLIST
      endif

      'Read the parmfile for parm TEXTHEADER to display at the top of the list
      getparmstr = "TEXTHEADER" + $format(lcnt,"Z")   'Get header of list file
      rc = $getparm( ,parmfile, getparmstr, listheader)

      'Read file and build array to display later
      dcnt = 1
      rc = $readfile(1, text_in)             'readfile list file
      do while rc = 0
         $parsem(text_in, 1, "|",d_desc[tcnt],d_file[tcnt],d_mode[tcnt]) 'Get list string
         d_code[tcnt] = $format(tcnt,"9999")

         'if line has delimeter "|" then following data is name of multi-level list
         'Get next file and create multi-level array.
         if $len(d_file[tcnt]) > 0 then
            d_block[tcnt] = $format(tcnt,"9999")
            filename = contstr + $uc(d_file[tcnt])
            rc = $openfile(2,filename,"I")
            if rc = 2 then
               rc = $closefile(2,"C")
               rc = $openfile(2,filename,"I")
            endif
            fcnt = 0
            do while rc = 0
               rc = $readfile(2, text_in)
               if rc = 0 then
                  d_text[cnt] = text_in
                  cnt++
                  fcnt++
               endif
            enddo
            listcnt[tcnt] = fcnt
            rc = $closefile(2, "C")
         endif
         tcnt++
         rc = $readfile(1, text_in)             'readfile list file
      enddo
      rc = $closefile(1,"C")

      'Now display list and check for input.
      $submitopt("off","Next")
      $cancelopt("off","Quit")
      $form("DCT")
      $tag("<CENTER>") $text(listheader,"H1") $tag("</CENTER>")

      $table(t1)
      dcnt = 0
      cnt = 1
      '* primary checkboxes
      do while dcnt++ < $maxarray(d_code[])
         $row()
         $col()
         $checkbox(selectbox[dcnt], d_desc[dcnt], d_code[dcnt],,,
            d_block[dcnt], d_block[dcnt])
         $block(d_block[dcnt],d_block[dcnt])
         $table(d_block[dcnt])
         fcnt = 0
         '*LEVEL 2
         do while fcnt++ < listcnt[dcnt]
            $row()
            $col()
            select d_mode[dcnt]
               case !dp or "L"
                  $parsem(d_text[cnt],1,"|",l3_desc[cnt],l3_file[cnt],l3_mode[cnt])
                  t_block = "L3" + d_value[cnt] + $formatf(cnt,"9999")
                  T = d_text[cnt]
                  if l3_file[cnt] dp then
                     T = l3_desc[cnt]
                  endif
                  $checkbox(d_value[cnt],T,"Y",,,t_block,"Y")
                  '*LEVEL 3
                  if $find("|",d_text[cnt]) > 0 then
                     $block(t_block,"Y")
                     '$parsem(d_text[cnt],1,"|",l3_desc[cnt],l3_file[cnt],l3_mode[cnt])
                     i = 0
                     rc = $getfile(tmp[],`contstr + $uc(l3_file[cnt])`)
                     (void)$putds(tmp[],l3_txt[cnt],x"0a")
                     $table(1,"tight")
                        $row()
                        $col()
                        $text(l3_txt[cnt])
                     $endtable(1)
                     $endblock(t_block,"Y")
                  endif
               case "T"
                  $text(d_text[cnt])
            endselect
            cnt++
         enddo
         $endtable(d_block[dcnt])
         $endblock(d_block[dcnt],d_block[dcnt])
      enddo

      $endtable(t1)
      $sendform("DCT")

      if $endbutton = "CANCEL" then
         rtrncode = "Y"
         $reqcancel = "Y"
         $returnerr = "Y"
         rc = 0
         goback
      endif

   'Find what items were checked and place in appropriate textblock.
      dcnt = 0
      cnt = 0
      fcnt = 0
      do while dcnt++ < $maxarray(selectbox[])
         if selectbox[dcnt] dp then
            content_txt = content_txt + d_desc[dcnt] + x"0a"
         endif

         cnt2 = 0
         do while cnt2++ < listcnt[dcnt]
            ++cnt
            select d_mode[dcnt]
               case !dp or "L"
                  if d_value[cnt] = "Y" then
                     if l3_file[cnt] dp then
                        content_txt = content_txt + " -" + l3_desc[cnt] + x"0a"
                        content_txt = content_txt + x"0a" + l3_txt[cnt] + x"0a"
                     else
                        content_txt = content_txt + " -" + d_text[cnt] + x"0a"
                     endif
                  endif
               case "T"
                  if selectbox[dcnt] dp then
                     content_txt = content_txt + " -" + d_text[cnt] + x"0a"
                  endif
            endselect
            
            content_txt += x"0a" + x"0a"

         enddo
      enddo

   SKIPLIST:

      T = "PRETXT" + $formatf(lcnt,"9")
      if $find(T,p[]) = 0 then
         'Check if a file exists for each textblock and load data if it does.
         filename = filestr + "-T" + $format(lcnt,"Z")
         rc = $openfile(3,filename,"I")
         if rc = 2 then
            rc = $closefile(3,"C")
            rc = $openfile(3,filename,"I")
         endif

         $clear(tblock)

         do while rc = 0
            rc = $readfile(3, text_in)
            if rc = 0 then
               tblock = tblock + text_in + x"0a"
            endif
         enddo
         tblock = tblock + content_txt + x"0a"

         fcnt++
         rc = $closefile(3,"C")
         content_txt = tblock
      endif

      if lcnt = 1 then
         if gennote dp then gennote += x"0a" endif
         gennote += content_txt + x"0a"
      else
         if ntopt[lcnt] dp then ntopt[lcnt] += x"0a" endif
         ntopt[lcnt] += content_txt + x"0a"
      endif

   NEXTFILE:
      'lcnt++
   enddo
goback

_init:
   'Construct filename of files to look for in the PNOTE directory
   filestr = $sysname + "/PNOTE/" + parmfile
   'contstr is the directoy where multi-level lists are located
   contstr = $sysname + "/PNOTE/"
   rtrncode = "N"

   gosub _readparm
goback

_readparm:

   if gennote dp then
      f_gen = "Y"
   endif

   i = 0
   do while i++ < $maxarray(ntopt[])
      if ntopt[i] dp then
         f_opt[i] = "Y"
      endif
   enddo

   rc = $getparm(p[],parmfile)
   i = 0
   do while i++ < $maxarray(p[])
      if $seg(p[i],1,6) = "PRETXT" then
         ptr = $num($charx(p[i],7))
         string = $seg(p[i],9)
         if string dp then
            string = $replace("%CR",x"0d",string)
            if ptr = 1 then
               if f_gen != "Y" then
                  if gennote dp then gennote += " " endif
                  gennote += string
               endif
            else
               if f_opt[ptr] != "Y" then
                  if ntopt[ptr] dp then ntopt[ptr] += " " endif
                  ntopt[ptr] += string
               endif
            endif
         endif
      endif
   enddo

goback

end PNEENTRY1A
